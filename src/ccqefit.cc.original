/******************************************************

This is the main for the fitter. In the long run I hope
to make it work like the xsTool macros: you set all your
inputs here and then can avoid delving into the fitters
backend. For the moment this isn't completely the case
for example a lot of the systematics specifics are in
the appropriate systematic parameters methods.


******************************************************/


#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <unistd.h>
#include <fstream>
#include <sstream>
#include <assert.h>

#include <TCanvas.h>
#include <TH1F.h>

#include "FluxParameters.hh"
#include "FluxParameters_norm.hh"
#include "DetParameters.hh"
#include "FSIParameters.hh"
#include "NuclFSIParameters.hh"
#include "XsecParameters.hh"
#include "FitParameters.hh"
#include "XsecFitter.hh"
#include "anyTreeMC.hh"
#include "AnySample.hh"


using namespace std;

int main(int argc, char *argv[])
{

  char const * xslf_env = getenv("XSLLINPUTDIR");
  if(!xslf_env){
    std::cerr << "[ERROR]: environment variable \"XSLLINPUTDIR\" not set. "
    "Cannot determine source tree location." << std::endl;
    return 1;
  }
    string inputDir = std::string(xslf_env);// + "/inputs";
  string fsel     = inputDir + "llFormat/neutP6BWA_nall_data_180316_allsyst_llFormat.root";
  string fakeData     = inputDir + "llFormat/neutP6BWA_nall_data_180316_allsyst_llFormat.root";
  string ffluxcov     = inputDir + "inputs/flux_covariance_banff_13av1.1.root";
  string fdetcov_fine = inputDir + "inputs/det_syst_11bins_pm250_dpTT.root";
  string fdetcov = inputDir + "inputs/detCovMatCoarse.root";
  string fxsecbinning = inputDir + "inputs/dpTT_symvarbinning_nb11_m250_p250.txt";
  string fnameout = "cc1P1PiOutput.root";
  //double potD     = 372.67;   //in units of 10^19 GENIE Air
  //double potD     = 349.15;   //in units of 10^19 NEUT Water
  double potD     = 331.6; //in units 10^19 Neut Air
  double potMC    = 331.6; //in units 10^19 Neut Air
  int seed        = 1019;
  double regparam = 0.0;

  //get command line options
  char cc;
  while((cc = getopt(argc, argv, "i:e:b:o:n:N:s:h:f:r:")) != -1)
  {
    switch(cc)
    {
      case 'i': //selected events
        fsel = optarg;
        break;
      case 'e': //flux covariance matrix
        ffluxcov = optarg;
        break;
      case 'd': //det covariance matrix
        fdetcov = optarg;
        break;
      case 'b': //binning for xsec weights
        fxsecbinning = optarg;
        break;
      case 'o': //output file
        fnameout = optarg;
        break;
      case 'n': //data POT
        potD = atof(optarg);
        break;
      case 'N': //MC POT
        potMC = atof(optarg);
        break;
      case 's': //random seed
        seed = atoi(optarg);
        break;
      case 'f': //fake data file
        fakeData = optarg;
        break;
      case 'r': //regularisation param
        regparam = atof(optarg);
        break;
      case 'h': //help
        std::cout << "USAGE: "
                  << argv[0] << " OPTIONS:" << std::endl
                  << "-i : \tset MC location" << std::endl
                  << "-e : \tset flux covariances location" << std::endl
                  << "-d : \tset detector covariances location" << std::endl
                  << "-b : \tset xec bin definitions" << std::endl
                  << "-o : \tset name of output file" << std::endl
                  << "-n : \tset POT for data in units 10**19" << std::endl
                  << "-N : \tset POT for MC in units 10**19" << std::endl
                  << "-s : \tset random seed" << std::endl
                  << "-f : \tset (fake) data location" << std::endl
                  << "-r : \tset regularisation parameter" << std::endl;
        return 0;
        break;
      default:
        return 1;
    }
  }

  //get info on the priors
  TFile *finfluxcov = TFile::Open(ffluxcov.c_str()); //contains flux and det. systematics info
  TFile *findetcov = TFile::Open(fdetcov.c_str()); //contains flux and det. systematics info
  TFile *findetcov_fine = TFile::Open(fdetcov_fine.c_str()); //contains flux and det. systematics info

  /*************************************** FLUX *****************************************/

  //setup enu bins and covm for flux
  TAxis *nd_numu_bins = (TAxis*)finfluxcov->Get("nd5_numode_numu_bins");
  TMatrixDSym *cov_flux_in   = (TMatrixDSym*)finfluxcov->Get("total_flux_cov");
  TMatrixDSym cov_flux(nd_numu_bins->GetNbins());
  vector<double> enubins;
  enubins.push_back(nd_numu_bins->GetBinLowEdge(1));
  for(int i=0;i<nd_numu_bins->GetNbins();i++)
  {
    enubins.push_back(nd_numu_bins->GetBinUpEdge(i+1));
    for(int j=0;j<nd_numu_bins->GetNbins();j++)
    {
      cov_flux(i, j) = (*cov_flux_in)(i,j);
    }
  }

  finfluxcov->Close();
  /*****************************************************************************************/

  /********************************COV.MATRIX FOR DETECTOR SYSTEMATICS*********************/
  //setup D1,D2 bins, starting param values and covm for det syst --------------

  //TVectorD* det_weights = (TVectorD*)findetcov->Get("det_weights");

  // Currently some rather horrible hard coding to make a vector of 1s of the correct size
  // This should really be an input to the fitter, WIP! ***

  const int ndetcovmatele = 30;

  double arr[ndetcovmatele];
  for(int i=0; i<ndetcovmatele; i++){ arr[i]=(1.0);}

  TVectorD* det_weights = new TVectorD(ndetcovmatele, arr);

  det_weights->Print();

  // ***

  TMatrixDSym *cov_det_in   = (TMatrixDSym*)findetcov->Get("covMat_norm");

  //Temp hack to remove samples from matrix, more hard coding for my CC0Pi ***
  // TMatrixDSym *cov_det_now   = (TMatrixDSym*)findetcov->Get("covMat_norm");
  // TMatrixDSym *cov_det_in   = new TMatrixDSym(24);
  // cov_det_now->GetSub(0,23,*cov_det_in);
  // cov_det_in->Print();
  // ***


  if(!cov_det_in) cout << "Warning! Problem opening detector cov matrix" << endl;
  TMatrixDSym cov_det(cov_det_in->GetNrows());
  for(size_t m=0; m<cov_det_in->GetNrows(); m++){
    for(size_t k=0; k<cov_det_in->GetNrows(); k++){
      cov_det(m, k) = (*cov_det_in)(m,k);
      //May need to add small terms to the last sample to make thh matrix invertable:
      //if((m>19)&&(k>19)&&(m==k)) cov_det(m, k) = 1.1*((*cov_det_in)(m,k));
    }
  }

  cov_det.SetTol(1e-200);
  cov_det.Print();
  double det = cov_det.Determinant();

  if(abs(det) < 1e-200){
    cout << "Warning, det cov matrix is non invertable. Det is:" << endl;
    cout << det << endl;
    return 0;
  }


  findetcov->Close();

  // ***** Fine binning: *****

  //TVectorD* det_weights_fine = (TVectorD*)findetcov_fine->Get("det_weights");

  // Currently some rather horrible hard coding to make a vector of 1s of the correct size
  // This should really be an input to the fitter, WIP! ***

  const int ndetcovmatele_fine = 54;

  double arr_fine[ndetcovmatele_fine];
  for(int i=0; i<ndetcovmatele_fine; i++){ arr_fine[i]=(1.0);}

  TVectorD* det_weights_fine = new TVectorD(ndetcovmatele_fine, arr_fine);

  det_weights_fine->Print();

  //***

  TMatrixDSym *cov_det_in_fine   = (TMatrixDSym*)findetcov_fine->Get("covMat_norm");


  //Temp hack to remove samples from matrix ***
  // TMatrixDSym *cov_det_now_fine   = (TMatrixDSym*)findetcov_fine->Get("covMat_norm");
  // TMatrixDSym *cov_det_in_fine   = new TMatrixDSym(ndetcovmatele_fine);
  // cov_det_now_fine->GetSub(0,(ndetcovmatele_fine-1),*cov_det_in_fine);
  // cov_det_in_fine->Print();
  // ***

  //TMatrixDSym *cov_det_in_fine   = (TMatrixDSym*)findetcov_fine->Get("cov_det");

  TMatrixDSym cov_det_fine(cov_det_in_fine->GetNrows());
  for(size_t m=0; m<cov_det_in_fine->GetNrows(); m++){
    for(size_t k=0; k<cov_det_in_fine->GetNrows(); k++){
      cov_det_fine(m, k) = (*cov_det_in_fine)(m,k);
    }
  }

  cov_det_fine.SetTol(1e-200);
  cov_det_fine.Print();
  double det_fine = cov_det_fine.Determinant();

  if(abs(det_fine) < 1e-200){
    cout << "Warning, det cov matrix with fine binning is non invertable. Det is:" << endl;
    cout << det_fine << endl;
    return 0;
  }

  findetcov_fine->Close();


  /***********************************************************************************/

  /********************************XSEC RESPONSE FUNCTIONS****************************/

  // Currently only deals with BG xsec model params

  vector<TFile*> responsefunctions;


  TFile* CAResrespfunc = new TFile("../inputs/responsefuncSD/NXSec_CA5RES_allVariation.root");
  responsefunctions.push_back(CAResrespfunc);
  TFile* MAResrespfunc = new TFile("../inputs/responsefuncSD/NXSec_MaNFFRES_allVariation.root");
  responsefunctions.push_back(MAResrespfunc);
  TFile* BgResrespfunc = new TFile("../inputs/responsefuncSD/NXSec_BgSclRES_allVariation.root");
  responsefunctions.push_back(BgResrespfunc);
  TFile* CCNuErespfunc = new TFile("../inputs/responsefuncSD/NIWG2012a_ccnueE0_allVariation.root");
  responsefunctions.push_back(CCNuErespfunc);
  TFile* dismpirespfunc = new TFile("../inputs/responsefuncSD/NIWG2012a_dismpishp_allVariation.root");
  responsefunctions.push_back(dismpirespfunc);
  TFile* CCCohrespfunc = new TFile("../inputs/responsefuncSD/NIWG2012a_cccohE0_allVariation.root");
  responsefunctions.push_back(CCCohrespfunc);
  TFile* NCCohrespfunc = new TFile("../inputs/responsefuncSD/NIWG2012a_nccohE0_allVariation.root");
  responsefunctions.push_back(NCCohrespfunc);
  TFile* NCOthrespfunc = new TFile("../inputs/responsefuncSD/NIWG2012a_ncotherE0_allVariation.root");
  responsefunctions.push_back(NCOthrespfunc);
  TFile* EbCrespfunc = new TFile("../inputs/responsefuncSD/NIWG2014a_Eb_C12_allVariation.root");
  responsefunctions.push_back(EbCrespfunc);

  TMatrixDSym cov_xsec(9);

  // Cov mat for xsec should be an input, not hard coded, WIP!

  cov_xsec(0,0) = 0.01412; //CA5Res
  cov_xsec(0,1) = 0.0;
  cov_xsec(0,2) = 0.0;
  cov_xsec(0,3) = 0.0;
  cov_xsec(0,4) = 0.0;
  cov_xsec(0,5) = 0.0;
  cov_xsec(0,6) = 0.0;
  cov_xsec(0,7) = 0.0;
  cov_xsec(0,8) = 0.0;

  cov_xsec(1,1) = 0.02493; //MARES
  cov_xsec(1,2) = 0;
  cov_xsec(1,3) = 0;
  cov_xsec(1,4) = 0;
  cov_xsec(1,5) = 0;
  cov_xsec(1,6) = 0;
  cov_xsec(1,7) = 0;
  cov_xsec(1,8) = 0;

  cov_xsec(2,2) = 0.02367; //BgRES
  cov_xsec(2,3) = 0;
  cov_xsec(2,4) = 0;
  cov_xsec(2,5) = 0;
  cov_xsec(2,6) = 0;
  cov_xsec(2,7) = 0;
  cov_xsec(2,8) = 0;

  cov_xsec(3,3) = 0.0004; //CCNUE_0
  cov_xsec(3,4) = 0;
  cov_xsec(3,5) = 0;
  cov_xsec(3,6) = 0;
  cov_xsec(3,7) = 0;
  cov_xsec(3,8) = 0;

  cov_xsec(4,4) = 0.16; //dismpishp
  cov_xsec(4,5) = 0;
  cov_xsec(4,6) = 0;
  cov_xsec(4,7) = 0;
  cov_xsec(4,8) = 0;

  cov_xsec(5,5) = 1.0; //CCCOH
  cov_xsec(5,6) = 0;
  cov_xsec(5,7) = 0;
  cov_xsec(5,8) = 0;

  cov_xsec(6,6) = 0.09; //NCCOH
  cov_xsec(6,7) = 0;
  cov_xsec(6,8) = 0;

  cov_xsec(7,7) = 0.09; //NCOTHER
  cov_xsec(7,8) = 0;

  cov_xsec(8,8) = 0.1296; //Eb_C12

  /*****************************************************************************************/


  /************************FSI RESPONSE FUNCTIONS*****************************************/

  vector<TFile*> responsefunctions_FSI;

  TFile* FrInelLowrespfunc = new TFile("../inputs/responsefuncSD/NCasc_FrCExLow_pi_allVariation.root");
  responsefunctions_FSI.push_back(FrInelLowrespfunc);
  TFile* FrInelHighrespfunc = new TFile("../inputs/responsefuncSD/NCasc_FrInelHigh_pi_allVariation.root");
  responsefunctions_FSI.push_back(FrInelHighrespfunc);
  TFile* FrPiProdrespfunc = new TFile("../inputs/responsefuncSD/NCasc_FrPiProd_pi_allVariation.root");
  responsefunctions_FSI.push_back(FrPiProdrespfunc);
  TFile* FrAbsrespfunc = new TFile("../inputs/responsefuncSD/NCasc_FrAbs_pi_allVariation.root");
  responsefunctions_FSI.push_back(FrAbsrespfunc);
  TFile* FrCExLowrespfunc = new TFile("../inputs/responsefuncSD/NCasc_FrCExLow_pi_allVariation.root");
  responsefunctions_FSI.push_back(FrCExLowrespfunc);
  TFile* FrCExHighrespfunc = new TFile("../inputs/responsefuncSD/NCasc_FrInelHigh_pi_allVariation.root");
  responsefunctions_FSI.push_back(FrCExHighrespfunc);

  // Cov mat for fsi should be an input, not hard coded, WIP!

  // Taken from BANFF prefit matrix
  TMatrixDSym cov_fsi(6);
  cov_fsi(0,0)= 0.17;
  cov_fsi(0,1)= -0.002778;
  cov_fsi(0,2)= 0;
  cov_fsi(0,3)= 0.02273;
  cov_fsi(0,4)= 0.005;
  cov_fsi(0,5)= 0;
  cov_fsi(1,1)= 0.1142;
  cov_fsi(1,2)= -0.1667;
  cov_fsi(1,3)= -0.001263;
  cov_fsi(1,4)= -0.002083;
  cov_fsi(1,5)=  -0.09259;
  cov_fsi(2,2)= 0.25;
  cov_fsi(2,3)= -5.204e-18;
  cov_fsi(2,4)= 0;
  cov_fsi(2,5)= 0.1389;
  cov_fsi(3,3)= 0.1694;
  cov_fsi(3,4)= -0.002273;
  cov_fsi(3,5)= -3.469e-18;
  cov_fsi(4,4)= 0.3213;
  cov_fsi(4,5)= 1.735e-18;
  cov_fsi(5,5)= 0.07716;

  // //Need to add 0.001 to the diagonal, otherwise not positive definite
   cov_fsi(0,0)= cov_fsi(0,0)+0.001;
   cov_fsi(1,1)= cov_fsi(1,1)+0.001;
   cov_fsi(2,2)= cov_fsi(2,2)+0.001;
   cov_fsi(3,3)= cov_fsi(3,3)+0.001;
   cov_fsi(4,4)= cov_fsi(4,4)+0.001;
   cov_fsi(5,5)= cov_fsi(5,5)+0.001;

  /*********************************************************************************/

  /************************Nucleon FSI RESPONSE FUNCTIONS*****************************/

  /************************Currently don't work, WIP ********************************/

  vector<TFile*> responsefunctions_NuclFSI;
  /*TFile* NMFPrespfunc = new TFile("../inputs/responsefunc/N_MFP_all_variation.root");
  responsefunctions_NuclFSI.push_back(NMFPrespfunc);
  TFile* NFrElasrespfunc = new TFile("../inputs/responsefunc/N_FrElas_all_variation.root");
  responsefunctions_NuclFSI.push_back(NFrElasrespfunc);
  TFile* NFrAbsrespfunc = new TFile("../inputs/responsefunc/N_FrAbs_all_variation.root");
  responsefunctions_NuclFSI.push_back(NFrAbsrespfunc);*/

  //NuclFSI parameters are not correlated for now
  TMatrixDSym cov_nuclfsi(3);
  cov_nuclfsi(0,0)= 0.20*0.20;
  cov_nuclfsi(0,1)= 0;
  cov_nuclfsi(0,2)= 0;
  cov_nuclfsi(1,1)= 0.3*0.3;
  cov_nuclfsi(1,2)= 0;
  cov_nuclfsi(2,2)= 0.20*0.20;

  /*********************************************************************************/


  // Setup data trees

   TFile *fdata = new TFile(TString(fakeData));
   TTree *tdata = (TTree*)(fdata->Get("selectedEvents"));


   //Set up bin edges

   std::vector<std::pair<double, double> > v_D1edges;
   std::vector<std::pair<double, double> > v_D2edges;
   std::vector<std::pair<double, double> > v_D1edges_Dummy;
   std::vector<std::pair<double, double> > v_D2edges_Dummy;
   ifstream fin(fxsecbinning.c_str());
   assert(fin.is_open());
   string line;
   while (getline(fin, line))
   {
     stringstream ss(line);
     double D1_1, D1_2, D2_1, D2_2;
     if(!(ss>>D2_1>>D2_2>>D1_1>>D1_2))
     {
       cerr<<"Bad line format: "<<endl
           <<"     "<<line<<endl;
       continue;
     }
       v_D1edges.push_back(make_pair(D1_1,D1_2));
       v_D2edges.push_back(make_pair(D2_1,D2_2));
       v_D1edges_Dummy.push_back(make_pair(D1_1-9999.0,D1_2-9999.0));
       v_D2edges_Dummy.push_back(make_pair(D2_1-9999.0,D2_2-9999.0));
  }
   fin.close();

  TFile *fout = TFile::Open(fnameout.c_str(), "RECREATE");
  cout<<"file open"<<endl;


  // Add analysis samples:

  vector<AnaSample*> samples;

  // The sample ID (first arg) should match the cutBranch corresponding to it

  /*
  AnySample sam1(0, "MuTPC",v_D1edges, v_D2edges,tdata);
  sam1.SetNorm(potD/potMC);
  samples.push_back(&sam1);
  */
  AnySample sam2(1, "MuTPCpTPC",v_D1edges, v_D2edges,tdata);
  sam2.SetNorm(potD/potMC);
  samples.push_back(&sam2);

  AnySample sam3(2, "MuTPCpFGD",v_D1edges, v_D2edges,tdata);
  sam3.SetNorm(potD/potMC);
  samples.push_back(&sam3);

  AnySample sam4(3, "MuFGDPTPC",v_D1edges, v_D2edges,tdata);
  sam4.SetNorm(potD/potMC);
  samples.push_back(&sam4);


  // AnySample sam5(4, "MuFGD",v_D1edges, v_D2edges,tdata);
  // sam5.SetNorm(potD/potMC);
  // samples.push_back(&sam5);

  AnySample sam6(5, "CC1pi",v_D1edges, v_D2edges,tdata);
  sam6.SetNorm(potD/potMC);
  samples.push_back(&sam6);

  AnySample sam7(6, "DIS",v_D1edges, v_D2edges,tdata);
  sam7.SetNorm(potD/potMC);
  samples.push_back(&sam7);


  AnySample sam8(7, "muTPC_Np",v_D1edges, v_D2edges,tdata);
  sam8.SetNorm(potD/potMC);
  samples.push_back(&sam8);

  // AnySample sam9(8, "muFGDpTPC_Np",v_D1edges, v_D2edges,tdata);
  // sam9.SetNorm(potD/potMC);
  // samples.push_back(&sam9);

  // AnySample sam10(9, "muFGD_Np",v_D1edges, v_D2edges,tdata);
  // sam10.SetNorm(potD/potMC);
  // samples.push_back(&sam10);

  int nsamples = samples.size();

  //--
  //read MC events
  anyTreeMC selTree(fsel.c_str());
  cout << "Reading and collecting events" << endl;
  selTree.GetEvents(samples);
  //get brakdown by reaction
  cout << "Getting sample breakdown by reaction" << endl;
  for(size_t s=0;s<samples.size();s++){
    ((AnySample*)(samples[s]))->GetSampleBreakdown(fout,"nominal");
  }

  cout<<"nominal data done"<<endl;


  //*************** FITTER SETTINGS **************************
  //In the bit below we choose which params are used in the fit
  //For stats only just use fit params
  //**********************************************************

  //define fit param classes
  vector<AnaFitParameters*> fitpara;
  //fitpara.SetFluxHisto(h_flux);

  //Fit parameters
  FitParameters sigfitpara(fxsecbinning.c_str());
  sigfitpara.InitEventMap(samples);
  fitpara.push_back(&sigfitpara);

  cout<<"fit parameters done"<<endl;

  // WIP WIP WIP ***

  //Flux parameters
  /*

  FluxParameters fluxpara(enubins);
  fluxpara.SetCovarianceMatrix(&cov_flux);
  fluxpara.InitEventMap(samples);
  fitpara.push_back(&fluxpara);

  //Flux shape
  FluxParameters fluxpara(enubins,"par_flux_shape");
  fluxpara.SetCovarianceMatrix(&cov_flux);
  TFile *fflux= new TFile("../inputs/c_flux.root","READ");
  TH1F *flux=(TH1F*)(((TCanvas*)(fflux->Get("c_flux")))->GetPrimitive("flux"));
  fluxpara.SetFluxHisto(flux);
  fluxpara.InitEventMap(samples);
  fitpara.push_back(&fluxpara);

  //Flux parameters normalization only
  vector<double> enubins_norm;
  enubins_norm.push_back(0);
  enubins_norm.push_back(9999999);
  FluxParameters fluxpara_norm(enubins_norm,"par_flux_norm");
  TMatrixDSym cov_flux_norm(1);
  (cov_flux_norm)(0,0) = (0.11*0.11);
  fluxpara_norm.SetCovarianceMatrix(&cov_flux_norm);
  fluxpara_norm.InitEventMap(samples);
  fitpara.push_back(&fluxpara_norm);

  //Nucleon FSI parameters
  NuclFSIParameters nuclfsipara;
  nuclfsipara.SetCovarianceMatrix(&cov_nuclfsi);
  nuclfsipara.StoreResponseFunctions(responsefunctions_NuclFSI, v_D1edges, v_D2edges);
  nuclfsipara.InitEventMap(samples);
  fitpara.push_back(&nuclfsipara);

  */

  //***


  //Det parameters
  // DetParameters detpara("../inputs/detCovBinning.txt", det_weights, samples, "par_detAve");
  // detpara.SetCovarianceMatrix(&cov_det);
  // detpara.InitEventMap(samples);
  // fitpara.push_back(&detpara);


  // DetParameters detpara_fine("../inputs/dptbinning.txt",det_weights_fine, samples, "par_detFine");
  // detpara_fine.SetCovarianceMatrix(&cov_det_fine);
  // detpara_fine.InitEventMap(samples);
  // fitpara.push_back(&detpara_fine);

  //Xsec parameters
  //XsecParameters xsecpara;
  //xsecpara.SetCovarianceMatrix(&cov_xsec);
  //xsecpara.StoreResponseFunctions(responsefunctions, v_D1edges, v_D2edges);
  //xsecpara.InitEventMap(samples);
  //fitpara.push_back(&xsecpara);

  // //FSI parameters
  // FSIParameters fsipara;
  // fsipara.SetCovarianceMatrix(&cov_fsi);
  // fsipara.StoreResponseFunctions(responsefunctions_FSI, v_D1edges, v_D2edges);
  // fsipara.InitEventMap(samples);
  // fitpara.push_back(&fsipara);





  //Instantiate fitter obj
  XsecFitter xsecfit(seed);
  //init w/ para vector
  std::cout << "initialising fitter with regularisaion param " << regparam << std::endl;
  xsecfit.InitFitter(fitpara, regparam);

  //fix parameters
  /*
  xsecfit.FixParameter("flux_norm",1);
  xsecfit.FixParameter("flux_shape",1);
  xsecfit.FixParameter("flux",1);
  xsecfit.FixParameter("detFine",1);
  xsecfit.FixParameter("MAres",1.41);
  xsecfit.FixParameter("CCoth",0.0);
  xsecfit.FixParameter("Piless",0.0);
  xsecfit.FixParameter("CC1piE0",1.1);
  xsecfit.FixParameter("CC1piE1",1.0);
  xsecfit.FixParameter("CCCoh",1.0);
  xsecfit.FixParameter("NCoth",1.0);
  xsecfit.FixParameter("NC1pi0E0",0.96);
  xsecfit.FixParameter("NC1piE0",1.0);
  xsecfit.FixParameter("PionFSI",1);
  */


  //set frequency to save output
  xsecfit.SetSaveMode(fout, 1);

  //do fit: 1 = generate toy dataset from nuisances (WITH stat fluct)
  //        2 = fake data from MC or real data (+ stat fluct)
  //        3 = no nuisance sampling only stat fluctuation
  xsecfit.Fit(samples, 2);

  fout->Close();

  return 0;
}
